mixin results_table(dscan, counts, treemap_data)
	-function rgb_to_triple(hex) {
	-	hex = String(hex).replace(/[^0-9a-f]/gi, '');
	-	if (hex.length < 6) {
	-		hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];
	-	}
	-	var triple = []
	-	for (i = 0; i < 3; i++) {
	-		triple.push(parseInt(hex.substr(i*2,2), 16));
	-	}
	-	return triple
	-}
	-function ColorLuminance(hex, lum) {
	-	var triple = rgb_to_triple(hex);
	-	lum = lum || 0;
	-	var rgb = "#";
	-	for( var i in triple) {
	-		var c = triple[i]
	-		c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);
	-		rgb += ("00"+c).substr(c.length);
	-	}
	-	return rgb;
	-}	
	-function simplify(name) {
	-	var pairs = [ ["Medium","Med"], ["Small", "Sm"], ["Large","Lrg"], ["Mobile", "Mobl"], ["Battery", "Batt"], ["Array", "Arr" ], ["Neutralizing", "Neut"], ["Webification", "Web"], ["Control Tower", "Tower"], ["Infrastructure", "Infra"], ["Corporate", "Corp"], ["Ship Maintenance Arr", "SMA" ], ["Scrambling", "Scram"], ["Secure ", ""], ["Interceptor", "Inty"], ["Electronic Warfare", "ECM"], ["Structure", "Struct"], ["Sovereignty", "Sov"], ["Territorial Claim Unit", "TCU"], ["Sovereignty Blockade Unit", "SBU"], [" Office", ""], ["Dreadnought", "Dread"], ["Rookie Ship", "Rookie"]]
	-   for( var i in pairs ) {
	-		var pair = pairs[i]
	-		name = name.replace(pair[0],pair[1]) // I am naughty, this is n^2.  fortunately the strings are relatively short.
	-	}
	-	return name
	-}
	.panel-group
		.panel.panel-primary
			- var colors = [ "#4D6A00", "#0C7F9A", "#BE0A83", "#7FBA5D", "#F8820D", "#D48E6A", "#478D76", "#C36278", "#515D91", "#655091", "#D4C66A", "#A4C663", "#AC5685", "#734B8E", "#AA3939" ]
			- var color_index = 0
			- var categories = Object.keys(locals.dscan)
			- categories.sort(function(a,b) { return a == "Ship" || b == "Ship" ? (a=="Ship" ? -1 : 1) : ( locals.counts.category[a] < locals.counts.category[b] ? 1 : -1)})
			each dscan_result in categories
				-var class_uuid = locals.uuid()
				-var category_count = locals.counts.category[dscan_result]
				-var current_category = { data: { "$area" : locals.counts.category[dscan_result] }, id:"tm"+class_uuid, name:simplify(dscan_result) + " (" + category_count.toString() + ")",	children: [] }
				-treemap_data.children.push(current_category)
				-var class_color = colors[color_index++]
				-var scan_class = locals.dscan[dscan_result]

				.panel-heading
					a.node(href="##{class_uuid}", data-toggle="collapse", data-parent="#accordian", style="font-size:18px")
						span.glyphicon.glyphicon-chevron-right
						=" " + dscan_result
						span.pull-right= category_count
				.panel-collapse.collapse.in.container-fluid(id="#{class_uuid}")
					- var groups = Object.keys(scan_class)
					- groups.sort(function(a,b) { return locals.counts.group[a] < locals.counts.group[b] ? 1 : -1 } )
					- var chunks = locals._.groupBy( groups, function(x, y) { return Math.floor( y / 3 )}) 
					- var biggestGroup = locals.counts.group[groups[0]]
					- var totalInGroup = locals._.reduce(groups, function( num, group ) { return locals.counts.group[group] + num }, 0)

					each chunk in chunks
						.row
							.col-xs-offset-1
								each group_name in chunk
									-var group_uuid = locals.uuid()
									-var group = scan_class[group_name]
									-group.sort(function(a,b) { return a.num < b.num ? 1 : -1})
									-var groupCount = locals.counts.group[group_name]
									-var brightness = ColorLuminance(class_color, (1-groupCount/biggestGroup))
									-var triple = rgb_to_triple(brightness)
									-var color = "node"
									-if(triple[0]*.299 + triple[1]*.587 + triple[2]*.114 > 140) {
									-	color = "node-black"
									-}

									-var current_group = { children:[], data:{ size:"12px", "$area" : 0 },id:"tm"+group_uuid, name:simplify(group_name) + " (" + groupCount.toString() + ")" }

									-current_category.children.push(current_group)
									-var percent = groupCount/totalInGroup * 100
									.col-xs-4
										.panel-group
											.panel.panel-info
												.panel-heading(style="background-color:#{brightness}")
													a(href="##{group_uuid}", data-toggle="collapse", data-parent="#accordian", style="font-size:16px", class=color)
														span.glyphicon.glyphicon-chevron-right
														=" " + simplify(group_name)
														span &nbsp; (#{groupCount})
														.progress(style="width:60px;float:right")
															.progress-bar.progress-bar(role="progressbar", aria-valuenow=groupCount, aria-valuemin=0, aria-valuemax=totalInGroup, style="width:#{percent}%;background-color:#ff5522") #{percent.toFixed(1)}% 
												.panel-collapse.collapse(id=group_uuid, class=dscan_result == "Ship" ? "in" : "")
													div(id="restm#{group_uuid}")
														-var count = 0
														-var largest = group.reduce(function(p,v) { return p.num > v.num ? p : v})
														each type_row in group
															-var type_name = type_row.typeName
															-var num = Math.log(Math.pow(type_row.num,2)+4)
															-var type_brightness = ColorLuminance(brightness, (1-type_row.num/largest.num))

															div.container-fluid(id="res{type_name}")
																.row(style="background-color:#{count++%2 == 0 ? '#abcdef' : '#dddddd'}")
																	-var triple = rgb_to_triple(type_brightness)
																	-var node_class = "node"
																	-if(triple[0]*.299 + triple[1]*.587 + triple[2]*.114 > 140) {
																	-	node_class = "node-black"
																	-}
																	-current_group.children.push({children:[], data: {node_class:node_class,size:"11px", "$color":type_brightness, "$area":num}, id:type_name, name:simplify(type_name) + " (" + type_row.num.toString() + ")"})
																	-current_group.data["$area"] += num
																	.col-xs-5.col-xs-offset-1=simplify(type_name)
																	.col-xs-4=type_row.raceName
																	.col-xs-2.pull-right=type_row.num
mixin treemap(treemap_data)
	script(src="/javascripts/jit.js")
	script.
		var json = !{JSON.stringify(treemap_data)}
		var tm = new $jit.TM.Squarified({
			//where to inject the visualization
			injectInto: 'treemap',
			//parent box title heights
			titleHeight: 20,
			//enable animations
			animate: false,
			//box offsets
			offset: 1,
			//Attach left and right click events
			duration: 640,
			//Add the name of the node in the correponding label
			//This method is called once, on label creation.
			width: $(document).width()*.87,
			height: 720,
			onCreateLabel: function(domElement, node){
				domElement.innerHTML = "<div  class='"+ node.data.node_class +"' style='font-size:" + node.data.size + "'>"+node.name +"</div>";
			},
			Events: {
				enable: true,
				onClick: function(node) {
					if(node) tm.enter(node);
				},
				onRightClick: function() {
					tm.out();
				}
			},
			Tips: {
				enable: true,
				//add positioning offsets
				offsetX: 20,
				offsetY: 20,
				//implement the onShow method to
				//add content to the tooltip when a node
				//is hovered
				onShow: function(tip, node, isLeaf, domElement) {
					//var html = document.getElementById("res"+node.id).innerHTML
					//tip.innerHTML =  html; 
				}  
			},						
		});
		tm.loadJSON(json);
		tm.refresh();

mixin dscan()
	-var date = locals.metadata.scan_date
	- var treemap_data = { data:{ size:"14px", "$color" : "#2E1F3E" }, id:'root', name: 'Dscan Results', children: [] }
	-var counts = locals.counts
	-var dscan = locals.dscan

	if date
		-var date_string = locals.moment.utc(locals.metadata.scan_date).fromNow(true)
		if locals.metadata.solarsystemname
			.well.well-sm Dscan for #{locals.metadata.solarsystemname}, recorded #{date_string} ago
	else
		.alert.alert-danger.fade.in
			button.close(type="button", data-dismiss="alert", aria-hidden="true") x 
			div Scan was taken without IGB site trust turned on, system name unknown.
	ul.nav.nav-tabs
		li.active
			a(href="#table", data-toggle="tab") Table
		li
			a(href="#visual", data-toggle="tab") Treemap

	.tab-content
		#table.tab-pane.active
			+results_table(dscan, counts, treemap_data)
		#visual.tab-pane
			center
				.well.well-sm
					#treemap
	+treemap(treemap_data)
